C <- any(seleccion == 40)  # Evento C: se escoge el as de picas
return(c(A, B, C))
}
# Realizar las simulaciones
resultados <- replicate(n_iteraciones, simular_seleccion())
# Calcular las probabilidades condicionales
P_A_y_C <- mean(resultados[1, ] & resultados[3, ])
P_C <- mean(resultados[3, ])
P_A_dado_C <- P_A_y_C / P_C
P_A_y_B <- mean(resultados[1, ] & resultados[2, ])
P_B <- mean(resultados[2, ])
P_A_dado_B <- P_A_y_B / P_B
# Mostrar los resultados
cat("La probabilidad estimada P(A|C) es:", P_A_dado_C, "\n")
cat("La probabilidad estimada P(A|B) es:", P_A_dado_B, "\n")
set.seed(123)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Función para simular un grupo de personas y verificar si al menos dos cumplen años el mismo día
simular_cumpleanos <- function(n_personas) {
dias <- sample(1:365, n_personas, replace = TRUE)
return(any(duplicated(dias)))
}
# Función para encontrar el número mínimo de personas necesarias
encontrar_n_personas <- function(prob_objetivo = 0.5) {
n_personas <- 2  # Empezamos con 2 personas
probabilidad <- 0
while (probabilidad < prob_objetivo) {
resultados <- replicate(n_iteraciones, simular_cumpleanos(n_personas))
probabilidad <- mean(resultados)
if (probabilidad < prob_objetivo) {
n_personas <- n_personas + 1
}
}
return(n_personas)
}
# Encontrar el número mínimo de personas para una probabilidad de al menos 50%
n_personas_50 <- encontrar_n_personas(0.5)
# Mostrar el resultado
cat("El número mínimo de personas para que la probabilidad de que al menos dos cumplan años el mismo día sea al menos 50% es:", n_personas_50, "\n")
set.seed(13)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Función para simular un grupo de personas y verificar si al menos dos cumplen años el mismo día
simular_cumpleanos <- function(n_personas) {
dias <- sample(1:365, n_personas, replace = TRUE)
return(any(duplicated(dias)))
}
# Función para encontrar el número mínimo de personas necesarias
encontrar_n_personas <- function(prob_objetivo = 0.5) {
n_personas <- 2  # Empezamos con 2 personas
probabilidad <- 0
while (probabilidad < prob_objetivo) {
resultados <- replicate(n_iteraciones, simular_cumpleanos(n_personas))
probabilidad <- mean(resultados)
if (probabilidad < prob_objetivo) {
n_personas <- n_personas + 1
}
}
return(n_personas)
}
# Encontrar el número mínimo de personas para una probabilidad de al menos 50%
n_personas_50 <- encontrar_n_personas(0.5)
# Mostrar el resultado
cat("El número mínimo de personas para que la probabilidad de que al menos dos cumplan años el mismo día sea al menos 50% es:", n_personas_50, "\n")
set.seed(13)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Función para simular un grupo de personas y verificar si al menos dos cumplen años el mismo día
simular_cumpleanos <- function(n_personas) {
dias <- sample(1:365, n_personas, replace = TRUE)
return(any(duplicated(dias)))
}
# Función para encontrar el número mínimo de personas necesarias
encontrar_n_personas <- function(prob_objetivo = 0.5) {
n_personas <- 2  # Empezamos con 2 personas
probabilidad <- 0
while (probabilidad < prob_objetivo) {
resultados <- replicate(n_iteraciones, simular_cumpleanos(n_personas))
probabilidad <- mean(resultados)
if (probabilidad < prob_objetivo) {
n_personas <- n_personas + 1
}
}
return(n_personas)
}
# Encontrar el número mínimo de personas para una probabilidad de al menos 50%
n_personas_50 <- encontrar_n_personas(0.5)
# Mostrar el resultado
cat("El número mínimo de personas para que la probabilidad de que al menos dos cumplan años el mismo día sea al menos 50% es:", n_personas_50, "\n")
source("~/.active-rstudio-document")
53%%20
source("~/.active-rstudio-document")
0.4359*3160
sample(1:80, 2)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
0.43023 * 3160
source("~/.active-rstudio-document")
0.433477 * 3160
source("~/.active-rstudio-document")
0.4337308 * 3160
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
0.3154*3160
source("~/.active-rstudio-document")
0.31324*3160
source("~/.active-rstudio-document")
familias <- matrix(1:80, nrow = 20, byrow = TRUE)
View(familias)
individuos <- as.vector(familias)
View(familias)
parejas <- matrix(sample(individuos, 80, replace = FALSE), ncol = 2)
View(parejas)
pareja_ganadora <- parejas[sample(1:40, 1), ]
View(familias)
View(parejas)
madre_presente <- pareja_ganadora %in% familias[, 2]
hija_presente <- pareja_ganadora %in% familias[, 4]
View(familias)
if (any(madre_presente) && !any(hija_presente)) {
madre <- pareja_ganadora[madre_presente]
# Verificar que la hija de la misma familia no esté en la pareja
familia_madre <- which(familias[, 2] == madre)
return(TRUE)
}
any(madre_presente) && !any(hija_presente)
madre <- pareja_ganadora[madre_presente]
View(familias)
familia_madre <- which(familias[, 2] == madre)
choose(80, 2)
20*20 + sum(1:19) + 20*20 + (20*20 - 20)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
sum(1:79)
choose(80, 2)
20*59 + choose(20, 2)
20*59
1180/3160
1370/3160
choose(80,2)
choose(20,2)
1180+190
1370/3160
(2/3)^12
all_samples <- list()
n <- 0 # size of list
while(TRUE) {
s <- sort(sample(1:3, 7, replace = T))
if (s %in% all_samples) {
next
} else {
n <- n + 1
all_samples[n] <- s
print(n)
}
}
all_samples <- list()
n <- 0 # size of list
while(TRUE) {
s <- sort(sample(1:3, 7, replace = T))
if (all_samples %in% s) {
next
} else {
n <- n + 1
all_samples[n] <- s
print(n)
}
}
source("~/.active-rstudio-document")
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
for (i in 1:0) print(i)
for (i in seq(1,0,1)) print(i)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
?sample
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
sort(sample(1:3, 7, replace = T))
source("~/.active-rstudio-document")
all_samples <- list()
n <- 1 # size of list
all_samples[[1]] <- sort(sample(1:3, 7, replace = T))
while(TRUE) {
s <- sort(sample(1:3, 7, replace = T))
repeated <- FALSE
for (i in 1:length(all_samples)) {
if (identical(all_samples[[i]], s)) {
repeated <- TRUE
}
}
if (!repeated) {
n <- n + 1
all_samples[[n]] <- s
print(n)
}
}
all_samples <- list()
n <- 1 # size of list
all_samples[[1]] <- sort(sample(1:3, 7, replace = T))
while(TRUE) {
s <- sort(sample(1:3, 7, replace = T))
repeated <- FALSE
for (i in 1:length(all_samples)) {
if (identical(all_samples[[i]], s)) {
repeated <- TRUE
}
}
if (!repeated) {
n <- n + 1
all_samples[[n]] <- s
print(n)
}
}
View(all_samples)
all_samples[[36]]
all_samples[[32]]
all_samples[[34]]
joaquin <- sample(c("Cara", "Cruz"), 1)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
set.seed(123)  # Para reproducibilidad
# Simular 10,000 pares de lanzamientos de moneda
resultados <- replicate(10000, {
lanzamientos <- sample(c("Cara", "Cruz"), size = 2, replace = TRUE)
"Cara" %in% lanzamientos && "Cruz" %in% lanzamientos
})
# Calcular la probabilidad de obtener una cara y una cruz
probabilidad <- mean(resultados)
probabilidad
set.seed(123)  # Para reproducibilidad
# Simular 10,000 pares de lanzamientos de moneda
resultados <- replicate(10000, {
lanzamientos <- sample(c("Cara", "Cruz"), size = 2, replace = TRUE)
"Cara" %in% lanzamientos && "Cruz" %in% lanzamientos
})
# Calcular la probabilidad de obtener una cara y una cruz
probabilidad <- mean(resultados)
probabilidad
set.seed(123)  # Para reproducibilidad
# Simular 10,000 pares de lanzamientos de moneda
resultados <- replicate(10000, {
lanzamientos <- sample(c("Cara", "Cruz"), size = 2, replace = TRUE)
"Cara" %in% lanzamientos && "Cruz" %in% lanzamientos
})
# Calcular la probabilidad de obtener una cara y una cruz
probabilidad <- mean(resultados)
probabilidad
set.seed(123)  # Para reproducibilidad
# Simular 10,000 pares de lanzamientos de moneda
resultados <- replicate(10000, {
lanzamientos <- sample(c("Cara", "Cruz"), size = 2, replace = TRUE)
"Cara" %in% lanzamientos && "Cruz" %in% lanzamientos
})
# Calcular la probabilidad de obtener una cara y una cruz
probabilidad <- mean(resultados)
probabilidad
Ac <- choose(349, 15)
S <- choose(379, 15)
1 - Ac/S
1-2*exp(-1)
exp(-15/12)
1 - pnorm(450, mean = 400, sd = 20)
choose(25,2) / choose(26,3)
choose(2,2) / choose(26,3)
choose(1,2) / choose(26,3)
s <- 0
s <- 0
for (n in 1:26) {
s <- s + n * choose(n-1, 2) / choose(26, 3)
}
s
s <- 0
for (n in 1:26) {
s <- s + n * choose(n-1, 2) / choose(26, 3)
print(paste0("(n=", n, ") s = ", s))
}
s
LETTERS[26]
LETTERS[20]
1 - pnorm(0, mean = -1.5, sd = sqrt(5/3))
1 - pnorm(0.5, mean = 0.25, sd = 0.25*0.75/100)
1 - pnorm(0.35, mean = 0.25, sd = 0.25*0.75/100)
1 - pnorm(0.35, mean = 0.25, sd = 0.25*0.75/50)
1 - pnorm(0.3, mean = 0.25, sd = 0.25*0.75/50)
1 - pnorm(0.3, mean = 0.25, sd = 0.25*0.75/40)
1 - pnorm(0.27, mean = 0.25, sd = 0.25*0.75/40)
1 - pnorm(0.26, mean = 0.25, sd = 0.25*0.75/40)
1 - pnorm(0.26, mean = 0.25, sd = 0.25*0.75/35)
1 - pnorm(0.26, mean = 0.25, sd = sqrt(0.25*0.75/35))
1 - pnorm(0.3, mean = 0.25, sd = sqrt(0.25*0.75/35))
1 - pnorm(0.3, mean = 0.25, sd = sqrt(0.25*0.75/50))
1 - pnorm(0.4, mean = 0.25, sd = sqrt(0.25*0.75/50))
library(tidyverse)
dummy_df <- data.frame(
Estimador = c(
"Estimador I", "Estimador I", "Estimador I",
"Estimador II", "Estimador II", "Estimador II", "Estimador II", "Estimador II",
"Estimador III", "Estimador III", "Estimador III", "Estimador III", "Estimador III", "Estimador III", "Estimador III"
),
x = c(8, 9, 10, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10, 11),
y = c(3, 9,  3, 2, 3, 5, 3,  2, 1, 2, 3, 4, 3,  2,  1),
)
dummy_df <- data.frame(
Estimador = c(
"Estimador I", "Estimador I", "Estimador I",
"Estimador II", "Estimador II", "Estimador II", "Estimador II", "Estimador II",
"Estimador III", "Estimador III", "Estimador III", "Estimador III", "Estimador III", "Estimador III", "Estimador III"
),
x = c(8, 9, 10, 6, 7, 8, 9, 10, 5, 6, 7, 8, 9, 10, 11),
y = c(3, 9,  3, 2, 3, 5, 3,  2, 1, 2, 3, 4, 3,  2,  1)
)
dummy_df %>% ggplot(aes(x = x, y = y)) + geom_bar() + facet_wrap(vars(Estimador))
dummy_df %>% ggplot(aes(x = x, y = y)) + geom_bar(stat = "identity") + facet_wrap(vars(Estimador))
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
theme_bw(base_size = 18)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank()
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
theme_bw(base_size = 18) +
theme(
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
scale_x_discrete(labels = 5:11) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
scale_x_manual(labels = 5:11) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
scale_x_continuous(labels = 5:11) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
scale_x_discrete(labels = 5:11) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
scale_x_discrete(values = 5:11) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
scale_x_discrete(breaks = 5:11) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
scale_x_discrete(breaks = 5:7) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
scale_x_discrete(labels = 5:7) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
#scale_x_discrete(labels = 5:7) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
scale_x_discrete(limits = 5:11) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
)
dummy_df %>%
ggplot(aes(x = x, y = y)) +
geom_bar(stat = "identity") +
facet_wrap(vars(Estimador)) +
scale_x_discrete(limits = 5:11) +
theme_bw(base_size = 18) +
theme(
axis.title.x=element_blank(),
axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank()
)
mean(c(5.8, 6.3, 6.9, 6.2, 6.5))
pt(6.34, df = 4)
pt((6.34 - 7)/(1), df = 4)
sd(c(5.8, 6.3, 6.9, 6.2, 6.5))
pt((6.34 - 7)/(0.4/sqrt(5)), df = 4)
(6.34 - 7)/(0.4/sqrt(5)
)
0.25*0.75 / 50
pnorm(50, mean = -30, sd = 10) - pnorm(-50, mean = -30, sd = 10)

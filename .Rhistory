factorial(7)
factorial(5.5)
file.create('.nojekyll')
bookdown::render_book()
install.packages("bookdown")
bookdown::render_book()
file.create('docs/.nojekyll')
factorial(11)
factorial(11) / (factorial(4) * factorial(4) * factorial(2))
x <- 0
for (i1 in 0:2) {
for (i2 in 0:2) {
if (i2 == i1) break
for (i3 in 0:2) {
if (i3 == i2) break
for (i4 in 0:2) {
if (i4 == i3) break
for (i5 in 0:2) {
if (i5 == i4) break
for (i6 in 0:2) {
if (i6 == i5) break
for (i7 in 0:2) {
if (i7 == i6) break
x <- x + 1
}
}
}
}
}
}
}
x
x <- 0
for (i1 in 0:2) {
for (i2 in 0:2) {
if (i2 == i1) break
for (i3 in 0:2) {
if (i3 == i2) break
for (i4 in 0:2) {
if (i4 == i3) break
for (i5 in 0:2) {
if (i5 == i4) break
for (i6 in 0:2) {
if (i6 == i5) break
for (i7 in 0:2) {
if (i7 == i6) break
x <- x + 1
}
}
}
}
}
}
}
x
x <- 0
for (i1 in 0:2) {
for (i2 in 0:2) {
if (i2 == i1) next
for (i3 in 0:2) {
if (i3 == i2) next
for (i4 in 0:2) {
if (i4 == i3) next
for (i5 in 0:2) {
if (i5 == i4) next
for (i6 in 0:2) {
if (i6 == i5) next
for (i7 in 0:2) {
if (i7 == i6) next
x <- x + 1
}
}
}
}
}
}
}
x
3^7 - 6 * 3^6
3^7 - 3^6
3 * (3**6 - 2**6)
set.seed(123)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Simulación de los lanzamientos de los 3 dados
suma_dados <- replicate(n_iteraciones, sum(sample(1:6, 3, replace = TRUE)))
set.seed(123)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Simulación de los lanzamientos de los 3 dados
suma_dados <- replicate(n_iteraciones, sum(sample(1:6, 3, replace = TRUE)))
# Calcular la probabilidad de que la suma sea igual a 10
probabilidad <- mean(suma_dados == 10)
# Mostrar el resultado
cat("La probabilidad estimada de que la suma de los 3 dados sea igual a 10 es:", probabilidad, "\n")
set.seed(123)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Función para simular los lanzamientos hasta obtener todas las sumas posibles
simular_lanzamientos <- function() {
# Vector para guardar las sumas obtenidas
sumas_obtenidas <- integer(11)  # Las posibles sumas son del 2 al 12, es decir, 11 posibles sumas
lanzamientos <- 0
while (any(sumas_obtenidas == 0)) {  # Mientras falte alguna suma
dado1 <- sample(1:6, 1, replace = TRUE)
dado2 <- sample(1:6, 1, replace = TRUE)
suma <- dado1 + dado2
sumas_obtenidas[suma - 1] <- 1  # Marcamos la suma como obtenida
lanzamientos <- lanzamientos + 1
}
return(lanzamientos)
}
# Realizar las simulaciones
resultados <- replicate(n_iteraciones, simular_lanzamientos())
# Calcular la probabilidad de más de 20 lanzamientos
probabilidad <- mean(resultados > 20)
# Mostrar el resultado
cat("La probabilidad estimada de necesitar más de 20 lanzamientos es:", probabilidad, "\n")
# Calcular la probabilidad de más de 20 lanzamientos
probabilidad <- mean(resultados > 50)
# Mostrar el resultado
cat("La probabilidad estimada de necesitar más de 20 lanzamientos es:", probabilidad, "\n")
# Calcular la probabilidad de más de 20 lanzamientos
probabilidad <- mean(resultados > 100)
# Mostrar el resultado
cat("La probabilidad estimada de necesitar más de 20 lanzamientos es:", probabilidad, "\n")
set.seed(123)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Simulación de los lanzamientos de los 2 dados
dados <- replicate(n_iteraciones, sample(1:6, 2, replace = TRUE))
# Calcular la suma de los dados
suma_dados <- colSums(dados)
# Filtrar los casos donde la suma es 8
suma_es_8 <- suma_dados == 8
# Calcular la cantidad de veces que uno de los dados es 6 dado que la suma es 8
uno_es_6 <- rowSums(dados[, suma_es_8] == 6) > 0
# Estimar la probabilidad condicional
probabilidad_condicional <- mean(uno_es_6)
# Mostrar el resultado
cat("La probabilidad estimada de que uno de los dados sea un 6 dado que la suma es 8 es:", probabilidad_condicional, "\n")
set.seed(23)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Simulación de los lanzamientos de los 2 dados
dados <- replicate(n_iteraciones, sample(1:6, 2, replace = TRUE))
# Calcular la suma de los dados
suma_dados <- colSums(dados)
# Filtrar los casos donde la suma es 8
suma_es_8 <- suma_dados == 8
# Calcular la cantidad de veces que uno de los dados es 6 dado que la suma es 8
uno_es_6 <- rowSums(dados[, suma_es_8] == 6) > 0
# Estimar la probabilidad condicional
probabilidad_condicional <- mean(uno_es_6)
# Mostrar el resultado
cat("La probabilidad estimada de que uno de los dados sea un 6 dado que la suma es 8 es:", probabilidad_condicional, "\n")
View(dados)
set.seed(123)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Simulación de los lanzamientos de los 2 dados
resultados <- replicate(n_iteraciones, sample(1:6, 2, replace = TRUE))
# Calcular la suma de los dados
suma_dados <- colSums(resultados)
# Filtrar los casos donde la suma es 8
casos_suma_8 <- resultados[, suma_dados == 8]
# Calcular la cantidad de veces que uno de los dados es 6 dado que la suma es 8
uno_es_6 <- colSums(casos_suma_8 == 6) > 0
# Estimar la probabilidad condicional
probabilidad_condicional <- mean(uno_es_6)
# Mostrar el resultado
cat("La probabilidad estimada de que uno de los dados sea un 6 dado que la suma es 8 es:", probabilidad_condicional, "\n")
set.seed(23)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Simulación de los lanzamientos de los 2 dados
resultados <- replicate(n_iteraciones, sample(1:6, 2, replace = TRUE))
# Calcular la suma de los dados
suma_dados <- colSums(resultados)
# Filtrar los casos donde la suma es 8
casos_suma_8 <- resultados[, suma_dados == 8]
# Calcular la cantidad de veces que uno de los dados es 6 dado que la suma es 8
uno_es_6 <- colSums(casos_suma_8 == 6) > 0
# Estimar la probabilidad condicional
probabilidad_condicional <- mean(uno_es_6)
# Mostrar el resultado
cat("La probabilidad estimada de que uno de los dados sea un 6 dado que la suma es 8 es:", probabilidad_condicional, "\n")
set.seed(505)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Simulación de los lanzamientos de los 2 dados
resultados <- replicate(n_iteraciones, sample(1:6, 2, replace = TRUE))
# Calcular la suma de los dados
suma_dados <- colSums(resultados)
# Filtrar los casos donde la suma es 8
casos_suma_8 <- resultados[, suma_dados == 8]
# Calcular la cantidad de veces que uno de los dados es 6 dado que la suma es 8
uno_es_6 <- colSums(casos_suma_8 == 6) > 0
# Estimar la probabilidad condicional
probabilidad_condicional <- mean(uno_es_6)
# Mostrar el resultado
cat("La probabilidad estimada de que uno de los dados sea un 6 dado que la suma es 8 es:", probabilidad_condicional, "\n")
set.seed(123)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Función para simular la selección de dos cartas
simular_seleccion <- function() {
mazo <- 1:52  # Representación de un mazo de 52 cartas
seleccion <- sample(mazo, 2, replace = FALSE)  # Selección de 2 cartas sin reposición
# Determinar los eventos
es_as <- seleccion %in% c(1, 14, 27, 40)  # 1, 14, 27, 40 representan los aces en el mazo
A <- all(es_as)  # Evento A: ambas cartas son aces
B <- any(es_as)  # Evento B: al menos una carta es un as
C <- any(seleccion == 40)  # Evento C: se escoge el as de picas
return(c(A, B, C))
}
# Realizar las simulaciones
resultados <- replicate(n_iteraciones, simular_seleccion())
# Calcular las probabilidades condicionales
P_A_y_C <- mean(resultados[1, ] & resultados[3, ])
P_C <- mean(resultados[3, ])
P_A_dado_C <- P_A_y_C / P_C
P_A_y_B <- mean(resultados[1, ] & resultados[2, ])
P_B <- mean(resultados[2, ])
P_A_dado_B <- P_A_y_B / P_B
# Mostrar los resultados
cat("La probabilidad estimada P(A|C) es:", P_A_dado_C, "\n")
cat("La probabilidad estimada P(A|B) es:", P_A_dado_B, "\n")
set.seed(123)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 100000
# Función para simular la selección de dos cartas
simular_seleccion <- function() {
mazo <- 1:52  # Representación de un mazo de 52 cartas
seleccion <- sample(mazo, 2, replace = FALSE)  # Selección de 2 cartas sin reposición
# Determinar los eventos
es_as <- seleccion %in% c(1, 14, 27, 40)  # 1, 14, 27, 40 representan los aces en el mazo
A <- all(es_as)  # Evento A: ambas cartas son aces
B <- any(es_as)  # Evento B: al menos una carta es un as
C <- any(seleccion == 40)  # Evento C: se escoge el as de picas
return(c(A, B, C))
}
# Realizar las simulaciones
resultados <- replicate(n_iteraciones, simular_seleccion())
# Calcular las probabilidades condicionales
P_A_y_C <- mean(resultados[1, ] & resultados[3, ])
P_C <- mean(resultados[3, ])
P_A_dado_C <- P_A_y_C / P_C
P_A_y_B <- mean(resultados[1, ] & resultados[2, ])
P_B <- mean(resultados[2, ])
P_A_dado_B <- P_A_y_B / P_B
# Mostrar los resultados
cat("La probabilidad estimada P(A|C) es:", P_A_dado_C, "\n")
cat("La probabilidad estimada P(A|B) es:", P_A_dado_B, "\n")
set.seed(1492)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 100000
# Función para simular la selección de dos cartas
simular_seleccion <- function() {
mazo <- 1:52  # Representación de un mazo de 52 cartas
seleccion <- sample(mazo, 2, replace = FALSE)  # Selección de 2 cartas sin reposición
# Determinar los eventos
es_as <- seleccion %in% c(1, 14, 27, 40)  # 1, 14, 27, 40 representan los aces en el mazo
A <- all(es_as)  # Evento A: ambas cartas son aces
B <- any(es_as)  # Evento B: al menos una carta es un as
C <- any(seleccion == 40)  # Evento C: se escoge el as de picas
return(c(A, B, C))
}
# Realizar las simulaciones
resultados <- replicate(n_iteraciones, simular_seleccion())
# Calcular las probabilidades condicionales
P_A_y_C <- mean(resultados[1, ] & resultados[3, ])
P_C <- mean(resultados[3, ])
P_A_dado_C <- P_A_y_C / P_C
P_A_y_B <- mean(resultados[1, ] & resultados[2, ])
P_B <- mean(resultados[2, ])
P_A_dado_B <- P_A_y_B / P_B
# Mostrar los resultados
cat("La probabilidad estimada P(A|C) es:", P_A_dado_C, "\n")
cat("La probabilidad estimada P(A|B) es:", P_A_dado_B, "\n")
set.seed(1492)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 1000000
# Función para simular la selección de dos cartas
simular_seleccion <- function() {
mazo <- 1:52  # Representación de un mazo de 52 cartas
seleccion <- sample(mazo, 2, replace = FALSE)  # Selección de 2 cartas sin reposición
# Determinar los eventos
es_as <- seleccion %in% c(1, 14, 27, 40)  # 1, 14, 27, 40 representan los aces en el mazo
A <- all(es_as)  # Evento A: ambas cartas son aces
B <- any(es_as)  # Evento B: al menos una carta es un as
C <- any(seleccion == 40)  # Evento C: se escoge el as de picas
return(c(A, B, C))
}
# Realizar las simulaciones
resultados <- replicate(n_iteraciones, simular_seleccion())
# Calcular las probabilidades condicionales
P_A_y_C <- mean(resultados[1, ] & resultados[3, ])
P_C <- mean(resultados[3, ])
P_A_dado_C <- P_A_y_C / P_C
P_A_y_B <- mean(resultados[1, ] & resultados[2, ])
P_B <- mean(resultados[2, ])
P_A_dado_B <- P_A_y_B / P_B
# Mostrar los resultados
cat("La probabilidad estimada P(A|C) es:", P_A_dado_C, "\n")
cat("La probabilidad estimada P(A|B) es:", P_A_dado_B, "\n")
set.seed(149)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 1000000
# Función para simular la selección de dos cartas
simular_seleccion <- function() {
mazo <- 1:52  # Representación de un mazo de 52 cartas
seleccion <- sample(mazo, 2, replace = FALSE)  # Selección de 2 cartas sin reposición
# Determinar los eventos
es_as <- seleccion %in% c(1, 14, 27, 40)  # 1, 14, 27, 40 representan los aces en el mazo
A <- all(es_as)  # Evento A: ambas cartas son aces
B <- any(es_as)  # Evento B: al menos una carta es un as
C <- any(seleccion == 40)  # Evento C: se escoge el as de picas
return(c(A, B, C))
}
# Realizar las simulaciones
resultados <- replicate(n_iteraciones, simular_seleccion())
# Calcular las probabilidades condicionales
P_A_y_C <- mean(resultados[1, ] & resultados[3, ])
P_C <- mean(resultados[3, ])
P_A_dado_C <- P_A_y_C / P_C
P_A_y_B <- mean(resultados[1, ] & resultados[2, ])
P_B <- mean(resultados[2, ])
P_A_dado_B <- P_A_y_B / P_B
# Mostrar los resultados
cat("La probabilidad estimada P(A|C) es:", P_A_dado_C, "\n")
cat("La probabilidad estimada P(A|B) es:", P_A_dado_B, "\n")
set.seed(123)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Función para simular un grupo de personas y verificar si al menos dos cumplen años el mismo día
simular_cumpleanos <- function(n_personas) {
dias <- sample(1:365, n_personas, replace = TRUE)
return(any(duplicated(dias)))
}
# Función para encontrar el número mínimo de personas necesarias
encontrar_n_personas <- function(prob_objetivo = 0.5) {
n_personas <- 2  # Empezamos con 2 personas
probabilidad <- 0
while (probabilidad < prob_objetivo) {
resultados <- replicate(n_iteraciones, simular_cumpleanos(n_personas))
probabilidad <- mean(resultados)
if (probabilidad < prob_objetivo) {
n_personas <- n_personas + 1
}
}
return(n_personas)
}
# Encontrar el número mínimo de personas para una probabilidad de al menos 50%
n_personas_50 <- encontrar_n_personas(0.5)
# Mostrar el resultado
cat("El número mínimo de personas para que la probabilidad de que al menos dos cumplan años el mismo día sea al menos 50% es:", n_personas_50, "\n")
set.seed(13)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Función para simular un grupo de personas y verificar si al menos dos cumplen años el mismo día
simular_cumpleanos <- function(n_personas) {
dias <- sample(1:365, n_personas, replace = TRUE)
return(any(duplicated(dias)))
}
# Función para encontrar el número mínimo de personas necesarias
encontrar_n_personas <- function(prob_objetivo = 0.5) {
n_personas <- 2  # Empezamos con 2 personas
probabilidad <- 0
while (probabilidad < prob_objetivo) {
resultados <- replicate(n_iteraciones, simular_cumpleanos(n_personas))
probabilidad <- mean(resultados)
if (probabilidad < prob_objetivo) {
n_personas <- n_personas + 1
}
}
return(n_personas)
}
# Encontrar el número mínimo de personas para una probabilidad de al menos 50%
n_personas_50 <- encontrar_n_personas(0.5)
# Mostrar el resultado
cat("El número mínimo de personas para que la probabilidad de que al menos dos cumplan años el mismo día sea al menos 50% es:", n_personas_50, "\n")
set.seed(13)  # Establecer una semilla para reproducibilidad
# Número de iteraciones
n_iteraciones <- 10000
# Función para simular un grupo de personas y verificar si al menos dos cumplen años el mismo día
simular_cumpleanos <- function(n_personas) {
dias <- sample(1:365, n_personas, replace = TRUE)
return(any(duplicated(dias)))
}
# Función para encontrar el número mínimo de personas necesarias
encontrar_n_personas <- function(prob_objetivo = 0.5) {
n_personas <- 2  # Empezamos con 2 personas
probabilidad <- 0
while (probabilidad < prob_objetivo) {
resultados <- replicate(n_iteraciones, simular_cumpleanos(n_personas))
probabilidad <- mean(resultados)
if (probabilidad < prob_objetivo) {
n_personas <- n_personas + 1
}
}
return(n_personas)
}
# Encontrar el número mínimo de personas para una probabilidad de al menos 50%
n_personas_50 <- encontrar_n_personas(0.5)
# Mostrar el resultado
cat("El número mínimo de personas para que la probabilidad de que al menos dos cumplan años el mismo día sea al menos 50% es:", n_personas_50, "\n")
source("~/.active-rstudio-document")
53%%20
source("~/.active-rstudio-document")
0.4359*3160
sample(1:80, 2)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
0.43023 * 3160
source("~/.active-rstudio-document")
0.433477 * 3160
source("~/.active-rstudio-document")
0.4337308 * 3160
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
0.3154*3160
source("~/.active-rstudio-document")
0.31324*3160
source("~/.active-rstudio-document")
familias <- matrix(1:80, nrow = 20, byrow = TRUE)
View(familias)
individuos <- as.vector(familias)
View(familias)
parejas <- matrix(sample(individuos, 80, replace = FALSE), ncol = 2)
View(parejas)
pareja_ganadora <- parejas[sample(1:40, 1), ]
View(familias)
View(parejas)
madre_presente <- pareja_ganadora %in% familias[, 2]
hija_presente <- pareja_ganadora %in% familias[, 4]
View(familias)
if (any(madre_presente) && !any(hija_presente)) {
madre <- pareja_ganadora[madre_presente]
# Verificar que la hija de la misma familia no esté en la pareja
familia_madre <- which(familias[, 2] == madre)
return(TRUE)
}
any(madre_presente) && !any(hija_presente)
madre <- pareja_ganadora[madre_presente]
View(familias)
familia_madre <- which(familias[, 2] == madre)
choose(80, 2)
20*20 + sum(1:19) + 20*20 + (20*20 - 20)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
sum(1:79)
choose(80, 2)
20*59 + choose(20, 2)
20*59
1180/3160
1370/3160
choose(80,2)
choose(20,2)
1180+190
1370/3160
(2/3)^12
